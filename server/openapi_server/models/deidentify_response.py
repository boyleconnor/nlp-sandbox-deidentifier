# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.annotation_set import AnnotationSet
from openapi_server.models.note import Note
from openapi_server import util

from openapi_server.models.annotation_set import AnnotationSet  # noqa: E501
from openapi_server.models.note import Note  # noqa: E501

class DeidentifyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, original_annotations=None, deidentified_annotations=None, deidentified_note=None):  # noqa: E501
        """DeidentifyResponse - a model defined in OpenAPI

        :param original_annotations: The original_annotations of this DeidentifyResponse.  # noqa: E501
        :type original_annotations: AnnotationSet
        :param deidentified_annotations: The deidentified_annotations of this DeidentifyResponse.  # noqa: E501
        :type deidentified_annotations: AnnotationSet
        :param deidentified_note: The deidentified_note of this DeidentifyResponse.  # noqa: E501
        :type deidentified_note: Note
        """
        self.openapi_types = {
            'original_annotations': AnnotationSet,
            'deidentified_annotations': AnnotationSet,
            'deidentified_note': Note
        }

        self.attribute_map = {
            'original_annotations': 'originalAnnotations',
            'deidentified_annotations': 'deidentifiedAnnotations',
            'deidentified_note': 'deidentifiedNote'
        }

        self._original_annotations = original_annotations
        self._deidentified_annotations = deidentified_annotations
        self._deidentified_note = deidentified_note

    @classmethod
    def from_dict(cls, dikt) -> 'DeidentifyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeidentifyResponse of this DeidentifyResponse.  # noqa: E501
        :rtype: DeidentifyResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def original_annotations(self):
        """Gets the original_annotations of this DeidentifyResponse.


        :return: The original_annotations of this DeidentifyResponse.
        :rtype: AnnotationSet
        """
        return self._original_annotations

    @original_annotations.setter
    def original_annotations(self, original_annotations):
        """Sets the original_annotations of this DeidentifyResponse.


        :param original_annotations: The original_annotations of this DeidentifyResponse.
        :type original_annotations: AnnotationSet
        """

        self._original_annotations = original_annotations

    @property
    def deidentified_annotations(self):
        """Gets the deidentified_annotations of this DeidentifyResponse.


        :return: The deidentified_annotations of this DeidentifyResponse.
        :rtype: AnnotationSet
        """
        return self._deidentified_annotations

    @deidentified_annotations.setter
    def deidentified_annotations(self, deidentified_annotations):
        """Sets the deidentified_annotations of this DeidentifyResponse.


        :param deidentified_annotations: The deidentified_annotations of this DeidentifyResponse.
        :type deidentified_annotations: AnnotationSet
        """

        self._deidentified_annotations = deidentified_annotations

    @property
    def deidentified_note(self):
        """Gets the deidentified_note of this DeidentifyResponse.


        :return: The deidentified_note of this DeidentifyResponse.
        :rtype: Note
        """
        return self._deidentified_note

    @deidentified_note.setter
    def deidentified_note(self, deidentified_note):
        """Sets the deidentified_note of this DeidentifyResponse.


        :param deidentified_note: The deidentified_note of this DeidentifyResponse.
        :type deidentified_note: Note
        """

        self._deidentified_note = deidentified_note
