# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.deidentification_step import DeidentificationStep
from openapi_server.models.note import Note
from openapi_server import util

from openapi_server.models.deidentification_step import DeidentificationStep  # noqa: E501
from openapi_server.models.note import Note  # noqa: E501

class DeidentifyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, note=None, deidentification_steps=None):  # noqa: E501
        """DeidentifyRequest - a model defined in OpenAPI

        :param note: The note of this DeidentifyRequest.  # noqa: E501
        :type note: Note
        :param deidentification_steps: The deidentification_steps of this DeidentifyRequest.  # noqa: E501
        :type deidentification_steps: List[DeidentificationStep]
        """
        self.openapi_types = {
            'note': Note,
            'deidentification_steps': List[DeidentificationStep]
        }

        self.attribute_map = {
            'note': 'note',
            'deidentification_steps': 'deidentificationSteps'
        }

        self._note = note
        self._deidentification_steps = deidentification_steps

    @classmethod
    def from_dict(cls, dikt) -> 'DeidentifyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeidentifyRequest of this DeidentifyRequest.  # noqa: E501
        :rtype: DeidentifyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note(self):
        """Gets the note of this DeidentifyRequest.


        :return: The note of this DeidentifyRequest.
        :rtype: Note
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DeidentifyRequest.


        :param note: The note of this DeidentifyRequest.
        :type note: Note
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def deidentification_steps(self):
        """Gets the deidentification_steps of this DeidentifyRequest.

        A list of deidentification steps  # noqa: E501

        :return: The deidentification_steps of this DeidentifyRequest.
        :rtype: List[DeidentificationStep]
        """
        return self._deidentification_steps

    @deidentification_steps.setter
    def deidentification_steps(self, deidentification_steps):
        """Sets the deidentification_steps of this DeidentifyRequest.

        A list of deidentification steps  # noqa: E501

        :param deidentification_steps: The deidentification_steps of this DeidentifyRequest.
        :type deidentification_steps: List[DeidentificationStep]
        """
        if deidentification_steps is None:
            raise ValueError("Invalid value for `deidentification_steps`, must not be `None`")  # noqa: E501

        self._deidentification_steps = deidentification_steps
