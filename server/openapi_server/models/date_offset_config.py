# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DateOffsetConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset_days=None):  # noqa: E501
        """DateOffsetConfig - a model defined in OpenAPI

        :param offset_days: The offset_days of this DateOffsetConfig.  # noqa: E501
        :type offset_days: int
        """
        self.openapi_types = {
            'offset_days': int
        }

        self.attribute_map = {
            'offset_days': 'offsetDays'
        }

        self._offset_days = offset_days

    @classmethod
    def from_dict(cls, dikt) -> 'DateOffsetConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DateOffsetConfig of this DateOffsetConfig.  # noqa: E501
        :rtype: DateOffsetConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset_days(self):
        """Gets the offset_days of this DateOffsetConfig.

        Number of days by which to offset annotated dates.  # noqa: E501

        :return: The offset_days of this DateOffsetConfig.
        :rtype: int
        """
        return self._offset_days

    @offset_days.setter
    def offset_days(self, offset_days):
        """Sets the offset_days of this DateOffsetConfig.

        Number of days by which to offset annotated dates.  # noqa: E501

        :param offset_days: The offset_days of this DateOffsetConfig.
        :type offset_days: int
        """
        if offset_days is None:
            raise ValueError("Invalid value for `offset_days`, must not be `None`")  # noqa: E501

        self._offset_days = offset_days
